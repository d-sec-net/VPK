services:
  postgres:
    image: postgres:15-alpine
    container_name: vpk_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-vpk}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-vpk_dev_password}
      POSTGRES_DB: ${POSTGRES_DB:-vpk_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-vpk} -d ${POSTGRES_DB:-vpk_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: vpk_redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: vpk_backend
    volumes:
      - ./backend:/app
      - ./app/data:/app/data
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-vpk}:${POSTGRES_PASSWORD:-vpk_dev_password}@postgres:5432/${POSTGRES_DB:-vpk_db}
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: ${SECRET_KEY:-dev_secret_key_change_in_production}
      SETTINGS_ENCRYPTION_KEY: ${SETTINGS_ENCRYPTION_KEY}
      BACKEND_CORS_ORIGINS: ${BACKEND_CORS_ORIGINS:-["http://localhost", "http://localhost:3000", "http://localhost:8000"]}
      ENVIRONMENT: development
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: vpk_celery_worker
    volumes:
      - ./backend:/app
      - ./app/data:/app/data
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-vpk}:${POSTGRES_PASSWORD:-vpk_dev_password}@postgres:5432/${POSTGRES_DB:-vpk_db}
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: ${SECRET_KEY:-dev_secret_key_change_in_production}
      SETTINGS_ENCRYPTION_KEY: ${SETTINGS_ENCRYPTION_KEY}
      BACKEND_CORS_ORIGINS: ${BACKEND_CORS_ORIGINS:-["http://localhost", "http://localhost:3000", "http://localhost:8000"]}
      ENVIRONMENT: development
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A app.core.celery_app worker --loglevel=info

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: vpk_frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      NEXT_PUBLIC_API_URL: http://localhost/api
      NODE_ENV: development
    ports:
      - "3000:3000"
    depends_on:
      - backend
    command: npm run dev

  nginx:
    image: nginx:alpine
    container_name: vpk_nginx
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      - backend
      - frontend

volumes:
  postgres_data:
  app_data: